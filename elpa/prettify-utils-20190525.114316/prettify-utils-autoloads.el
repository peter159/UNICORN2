;;; prettify-utils-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from prettify-utils.el

(autoload 'prettify-utils--list "prettify-utils" "\
Takes two lists and interleaves the (optional) second between each element of 
the first.  Used to create multi-character sequences for use with the minor mode
`prettify-symbols-mode'.  If not supplied, GLUE defaults to '(Br . Bl).  For more 
information about GLUE, refer to the documentation for the `compose-region'
function and the `reference-point-alist' variable.

This function is used by `prettify-utils-string' to create the lists given to 
`prettify-symbols-alist'.  Calling prettify-utils--list directly is probably not 
what you want, check the documentation for `prettify-utils-string' and 
`prettify-utils-generate' instead.

Example use:
(prettify-utils--list (string-to-list \"hello\") '(Br . Bl))

(fn L &optional GLUE)")
(autoload 'prettify-utils-string "prettify-utils" "\
Takes a string and an optional list, and returns a list of the string's 
characters with GLUE interleaved between each character, for use with 
`prettify-symbols-mode'.  If no GLUE is supplied, uses the 
`prettify-utils--list' default.  For more information about GLUE, refer to the 
documentation for the `compose-region' function and the `reference-point-alist' 
variable.

This function can be used to simplify multiple-character replacements when 
manually constructing a `prettify-symbols-alist'.  For something more high-level, 
consider using `prettify-utils-generate' to create the entire alist instead.

Example:

(prettify-utils-string \"example\" '(Br . Bl))

(fn S &optional GLUE)")
(autoload 'prettify-utils-generate "prettify-utils" "\
Generates an alist for use when setting `prettify-symbols-alist'.  Takes one or 
more LISTS, each consisting of two strings and an optional GLUE list to be 
interleaved between characters in the replacement list.  If the optional GLUE
list is not supplied, uses the `prettify-utils--list' default of '(Br . Bl).  For more 
information about GLUE, refer to the documentation for the `compose-region'
function and the `reference-point-alist' variable.

Example #1:

(setq prettify-symbols-alist 
	  (prettify-utils-generate (\"foo\" \"bar\")
							   (\">=\" \"≥\" (Br . Bl))
							   (\"->\"     \"→ \")))

Example #2:

(setq prettify-symbols-alist
	  (prettify-utils-generate 
	   (\"lambda\"  \"λ\")
	   (\"|>\"      \"▷\")
	   (\"<|\"      \"◁\")
	   (\"->>\"     \"↠  \")
	   (\"->\"      \"→ \")
	   (\"<-\"      \"← \")
	   (\"=>\"      \"⇒\")
	   (\"<=\"      \"≤\")
	   (\">=\"      \"≥\")))

(fn &rest LISTS)" nil t)
(autoload 'prettify-utils-generate-f "prettify-utils" "\
Generates an alist for use when setting `prettify-symbols-alist'.  Takes one or 
more LISTS, each consisting of two strings and an optional GLUE list to be 
interleaved between characters in the replacement list.  If the optional GLUE
list is not supplied, uses the `prettify-utils--list' default of '(Br . Bl).  For more 
information about GLUE, refer to the documentation for the `compose-region'
function and the `reference-point-alist' variable.

This is a function equivalent of the `prettify-utils-generate' macro.  Unless
you specifically need a function, such as for use with a higher-order function,
you should use the `prettify-utils-generate' macro instead.

Example:

(prettify-utils-generate-f '(\"foo\" \"bar\")
				           '(\">=\" \"≥\" (Br . Bl))
						   '(\"->\"     \"→ \"))

(fn &rest LISTS)")
(autoload 'prettify-utils-add-hook "prettify-utils" "\
Convenience macro for the most likely use case of prettify-utils: using
`add-hook' to add LISTS to MODE. LISTS consists of one or more lists of
replacements, defined as expected by `prettify-utils-generate'.

Example:

;; Replace org-mode checkboxes with appropriate unicode boxes
(prettify-utils-add-hook org-mode
                         (\"[ ]\" \"☐\")
                         (\"[X]\" \"☑\")
                         (\"[-]\" \"❍\"))

(fn MODE &rest LISTS)" nil t)
(register-definition-prefixes "prettify-utils" '("prettify-utils-create-pair"))

;;; End of scraped data

(provide 'prettify-utils-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; prettify-utils-autoloads.el ends here
