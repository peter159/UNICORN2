;;; symbols-outline-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from symbols-outline.el

(autoload 'symbols-outline-mode "symbols-outline" "\
Mode showing symbols outline.

(fn)" t)
(autoload 'symbols-outline-show "symbols-outline" "\
Show symbols outline in side window." t)
(register-definition-prefixes "symbols-outline" '("symbols-outline-"))


;;; Generated autoloads from symbols-outline-ctags.el

(autoload 'symbols-outline-ctags-fetch "symbols-outline-ctags" "\
Retrieve symbols using ctags.
Argument REFRESH-FN should be called upon the retrieved symbols tree.

(fn REFRESH-FN)")
(register-definition-prefixes "symbols-outline-ctags" '("symbols-outline-ctags-"))


;;; Generated autoloads from symbols-outline-follow-mode.el

(defvar symbols-outline-follow-mode nil "\
Non-nil if Symbols-Outline-Follow mode is enabled.
See the `symbols-outline-follow-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `symbols-outline-follow-mode'.")
(custom-autoload 'symbols-outline-follow-mode "symbols-outline-follow-mode" nil)
(autoload 'symbols-outline-follow-mode "symbols-outline-follow-mode" "\
Follow the symbol at point in symbols-outline window.

This is a global minor mode.  If called interactively, toggle the
`Symbols-Outline-Follow mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='symbols-outline-follow-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "symbols-outline-follow-mode" '("symbols-outline-follow-mode-"))


;;; Generated autoloads from symbols-outline-lsp.el

(autoload 'symbols-outline-lsp-fetch "symbols-outline-lsp" "\
Retrieve symbols via lsp-mode or eglot.
Argument REFRESH-FN should be called upon the retrieved symbols tree.

(fn REFRESH-FN)")
(register-definition-prefixes "symbols-outline-lsp" '("symbols-outline-lsp--"))


;;; Generated autoloads from symbols-outline-nerd-icon.el

(register-definition-prefixes "symbols-outline-nerd-icon" '("symbols-outline-nerd-icon-"))


;;; Generated autoloads from symbols-outline-node.el

(register-definition-prefixes "symbols-outline-node" '("symbols-outline-node-"))


;;; Generated autoloads from symbols-outline-svg-icon.el

(register-definition-prefixes "symbols-outline-svg-icon" '("symbols-outline-svg-icon"))

;;; End of scraped data

(provide 'symbols-outline-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; symbols-outline-autoloads.el ends here
